#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class TopDef;
class ClassMember;
class IdentExpan;
class Arg;
class Block;
class Stmt;
class Item;
class Type;
class Expr;
class AddOp;
class MulOp;
class RelOp;
class ProgramDef;
class FnDef;
class ClassMem;
class ClassFun;
class ClassDefNoInherit;
class ClassDefInherit;
class EmptyClassDef;
class EmptyClassDefInherit;
class IdentExp;
class IdentExpFun;
class IdentExpSimple;
class IdentExpSimpleFun;
class IdentExpNew;
class IdentExpNull;
class IdentExpBracket;
class ArgDef;
class BlockDef;
class Empty;
class BStmt;
class Decl;
class NoInit;
class Init;
class Ass;
class Incr;
class Decr;
class Ret;
class VRet;
class Cond;
class CondElse;
class While;
class SExp;
class Int;
class Str;
class Bool;
class Void;
class Class;
class Fun;
class EVar;
class ELitInt;
class ELitTrue;
class ELitFalse;
class EString;
class Neg;
class Not;
class EMul;
class EAdd;
class ERel;
class EAnd;
class EOr;
class Plus;
class Minus;
class Times;
class Div;
class Mod;
class LTH;
class LE;
class GTH;
class GE;
class EQU;
class NE;
class ListClassMember;
class ListTopDef;
class ListArg;
class ListStmt;
class ListItem;
class ListType;
class ListExpr;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitTopDef(TopDef *p) = 0;
  virtual void visitClassMember(ClassMember *p) = 0;
  virtual void visitIdentExpan(IdentExpan *p) = 0;
  virtual void visitArg(Arg *p) = 0;
  virtual void visitBlock(Block *p) = 0;
  virtual void visitStmt(Stmt *p) = 0;
  virtual void visitItem(Item *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitExpr(Expr *p) = 0;
  virtual void visitAddOp(AddOp *p) = 0;
  virtual void visitMulOp(MulOp *p) = 0;
  virtual void visitRelOp(RelOp *p) = 0;
  virtual void visitProgramDef(ProgramDef *p) = 0;
  virtual void visitFnDef(FnDef *p) = 0;
  virtual void visitClassMem(ClassMem *p) = 0;
  virtual void visitClassFun(ClassFun *p) = 0;
  virtual void visitClassDefNoInherit(ClassDefNoInherit *p) = 0;
  virtual void visitClassDefInherit(ClassDefInherit *p) = 0;
  virtual void visitEmptyClassDef(EmptyClassDef *p) = 0;
  virtual void visitEmptyClassDefInherit(EmptyClassDefInherit *p) = 0;
  virtual void visitIdentExp(IdentExp *p) = 0;
  virtual void visitIdentExpFun(IdentExpFun *p) = 0;
  virtual void visitIdentExpSimple(IdentExpSimple *p) = 0;
  virtual void visitIdentExpSimpleFun(IdentExpSimpleFun *p) = 0;
  virtual void visitIdentExpNew(IdentExpNew *p) = 0;
  virtual void visitIdentExpNull(IdentExpNull *p) = 0;
  virtual void visitIdentExpBracket(IdentExpBracket *p) = 0;
  virtual void visitArgDef(ArgDef *p) = 0;
  virtual void visitBlockDef(BlockDef *p) = 0;
  virtual void visitEmpty(Empty *p) = 0;
  virtual void visitBStmt(BStmt *p) = 0;
  virtual void visitDecl(Decl *p) = 0;
  virtual void visitNoInit(NoInit *p) = 0;
  virtual void visitInit(Init *p) = 0;
  virtual void visitAss(Ass *p) = 0;
  virtual void visitIncr(Incr *p) = 0;
  virtual void visitDecr(Decr *p) = 0;
  virtual void visitRet(Ret *p) = 0;
  virtual void visitVRet(VRet *p) = 0;
  virtual void visitCond(Cond *p) = 0;
  virtual void visitCondElse(CondElse *p) = 0;
  virtual void visitWhile(While *p) = 0;
  virtual void visitSExp(SExp *p) = 0;
  virtual void visitInt(Int *p) = 0;
  virtual void visitStr(Str *p) = 0;
  virtual void visitBool(Bool *p) = 0;
  virtual void visitVoid(Void *p) = 0;
  virtual void visitClass(Class *p) = 0;
  virtual void visitFun(Fun *p) = 0;
  virtual void visitEVar(EVar *p) = 0;
  virtual void visitELitInt(ELitInt *p) = 0;
  virtual void visitELitTrue(ELitTrue *p) = 0;
  virtual void visitELitFalse(ELitFalse *p) = 0;
  virtual void visitEString(EString *p) = 0;
  virtual void visitNeg(Neg *p) = 0;
  virtual void visitNot(Not *p) = 0;
  virtual void visitEMul(EMul *p) = 0;
  virtual void visitEAdd(EAdd *p) = 0;
  virtual void visitERel(ERel *p) = 0;
  virtual void visitEAnd(EAnd *p) = 0;
  virtual void visitEOr(EOr *p) = 0;
  virtual void visitPlus(Plus *p) = 0;
  virtual void visitMinus(Minus *p) = 0;
  virtual void visitTimes(Times *p) = 0;
  virtual void visitDiv(Div *p) = 0;
  virtual void visitMod(Mod *p) = 0;
  virtual void visitLTH(LTH *p) = 0;
  virtual void visitLE(LE *p) = 0;
  virtual void visitGTH(GTH *p) = 0;
  virtual void visitGE(GE *p) = 0;
  virtual void visitEQU(EQU *p) = 0;
  virtual void visitNE(NE *p) = 0;
  virtual void visitListClassMember(ListClassMember *p) = 0;
  virtual void visitListTopDef(ListTopDef *p) = 0;
  virtual void visitListArg(ListArg *p) = 0;
  virtual void visitListStmt(ListStmt *p) = 0;
  virtual void visitListItem(ListItem *p) = 0;
  virtual void visitListType(ListType *p) = 0;
  virtual void visitListExpr(ListExpr *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  int line_number;
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;
};

class TopDef : public Visitable
{
public:
  virtual TopDef *clone() const = 0;
};

class ClassMember : public Visitable
{
public:
  virtual ClassMember *clone() const = 0;
};

class IdentExpan : public Visitable
{
public:
  virtual IdentExpan *clone() const = 0;
};

class Arg : public Visitable
{
public:
  virtual Arg *clone() const = 0;
};

class Block : public Visitable
{
public:
  virtual Block *clone() const = 0;
};

class Stmt : public Visitable
{
public:
  virtual Stmt *clone() const = 0;
};

class Item : public Visitable
{
public:
  virtual Item *clone() const = 0;
};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;
};

class Expr : public Visitable
{
public:
  String expr_type_;
  virtual Expr *clone() const = 0;
};

class AddOp : public Visitable
{
public:
  virtual AddOp *clone() const = 0;
};

class MulOp : public Visitable
{
public:
  virtual MulOp *clone() const = 0;
};

class RelOp : public Visitable
{
public:
  virtual RelOp *clone() const = 0;
};



class ProgramDef : public Program
{
public:
  ListTopDef *listtopdef_;

  ProgramDef(const ProgramDef &);
  ProgramDef &operator=(const ProgramDef &);
  ProgramDef(ListTopDef *p1);
  ~ProgramDef();
  virtual void accept(Visitor *v);
  virtual ProgramDef *clone() const;
  void swap(ProgramDef &);
};

class FnDef : public TopDef
{
public:
  Type *type_;
  Ident ident_;
  ListArg *listarg_;
  Block *block_;

  FnDef(const FnDef &);
  FnDef &operator=(const FnDef &);
  FnDef(Type *p1, Ident p2, ListArg *p3, Block *p4);
  ~FnDef();
  virtual void accept(Visitor *v);
  virtual FnDef *clone() const;
  void swap(FnDef &);
};

class ClassDefNoInherit : public TopDef
{
public:
  Ident ident_;
  ListClassMember *listclassmember_;

  ClassDefNoInherit(const ClassDefNoInherit &);
  ClassDefNoInherit &operator=(const ClassDefNoInherit &);
  ClassDefNoInherit(Ident p1, ListClassMember *p2);
  ~ClassDefNoInherit();
  virtual void accept(Visitor *v);
  virtual ClassDefNoInherit *clone() const;
  void swap(ClassDefNoInherit &);
};

class ClassDefInherit : public TopDef
{
public:
  Ident ident_1;
  Ident ident_2;
  ListClassMember *listclassmember_;

  ClassDefInherit(const ClassDefInherit &);
  ClassDefInherit &operator=(const ClassDefInherit &);
  ClassDefInherit(Ident p1, Ident p2, ListClassMember *p3);
  ~ClassDefInherit();
  virtual void accept(Visitor *v);
  virtual ClassDefInherit *clone() const;
  void swap(ClassDefInherit &);
};

class EmptyClassDef : public TopDef
{
public:
  Ident ident_;

  EmptyClassDef(const EmptyClassDef &);
  EmptyClassDef &operator=(const EmptyClassDef &);
  EmptyClassDef(Ident p1);
  ~EmptyClassDef();
  virtual void accept(Visitor *v);
  virtual EmptyClassDef *clone() const;
  void swap(EmptyClassDef &);
};

class EmptyClassDefInherit : public TopDef
{
public:
  Ident ident_1;
  Ident ident_2;

  EmptyClassDefInherit(const EmptyClassDefInherit &);
  EmptyClassDefInherit &operator=(const EmptyClassDefInherit &);
  EmptyClassDefInherit(Ident p1, Ident p2);
  ~EmptyClassDefInherit();
  virtual void accept(Visitor *v);
  virtual EmptyClassDefInherit *clone() const;
  void swap(EmptyClassDefInherit &);
};

class ClassMem : public ClassMember
{
public:
  Type *type_;
  Ident ident_;

  ClassMem(const ClassMem &);
  ClassMem &operator=(const ClassMem &);
  ClassMem(Type *p1, Ident p2);
  ~ClassMem();
  virtual void accept(Visitor *v);
  virtual ClassMem *clone() const;
  void swap(ClassMem &);
};

class ClassFun : public ClassMember
{
public:
  Type *type_;
  Ident ident_;
  ListArg *listarg_;
  Block *block_;

  ClassFun(const ClassFun &);
  ClassFun &operator=(const ClassFun &);
  ClassFun(Type *p1, Ident p2, ListArg *p3, Block *p4);
  ~ClassFun();
  virtual void accept(Visitor *v);
  virtual ClassFun *clone() const;
  void swap(ClassFun &);
};

class IdentExp : public IdentExpan
{
public:
  IdentExpan *identexpan_;
  Ident ident_;

  IdentExp(const IdentExp &);
  IdentExp &operator=(const IdentExp &);
  IdentExp(IdentExpan *p1, Ident p2);
  ~IdentExp();
  virtual void accept(Visitor *v);
  virtual IdentExp *clone() const;
  void swap(IdentExp &);
};

class IdentExpFun : public IdentExpan
{
public:
  IdentExpan *identexpan_;
  Ident ident_;
  ListExpr *listexpr_;

  IdentExpFun(const IdentExpFun &);
  IdentExpFun &operator=(const IdentExpFun &);
  IdentExpFun(IdentExpan *p1, Ident p2, ListExpr *p3);
  ~IdentExpFun();
  virtual void accept(Visitor *v);
  virtual IdentExpFun *clone() const;
  void swap(IdentExpFun &);
};

class IdentExpSimple : public IdentExpan
{
public:
  Ident ident_;
  String my_type_;

  IdentExpSimple(const IdentExpSimple &);
  IdentExpSimple &operator=(const IdentExpSimple &);
  IdentExpSimple(Ident p1);
  ~IdentExpSimple();
  virtual void accept(Visitor *v);
  virtual IdentExpSimple *clone() const;
  void swap(IdentExpSimple &);
};

class IdentExpSimpleFun : public IdentExpan
{
public:
  Ident ident_;
  ListExpr *listexpr_;

  IdentExpSimpleFun(const IdentExpSimpleFun &);
  IdentExpSimpleFun &operator=(const IdentExpSimpleFun &);
  IdentExpSimpleFun(Ident p1, ListExpr *p2);
  ~IdentExpSimpleFun();
  virtual void accept(Visitor *v);
  virtual IdentExpSimpleFun *clone() const;
  void swap(IdentExpSimpleFun &);
};

class IdentExpNew : public IdentExpan
{
public:
  Type *type_;

  IdentExpNew(const IdentExpNew &);
  IdentExpNew &operator=(const IdentExpNew &);
  IdentExpNew(Type *p1);
  ~IdentExpNew();
  virtual void accept(Visitor *v);
  virtual IdentExpNew *clone() const;
  void swap(IdentExpNew &);
};

class IdentExpNull : public IdentExpan
{
public:
  Type *type_;

  IdentExpNull(const IdentExpNull &);
  IdentExpNull &operator=(const IdentExpNull &);
  IdentExpNull(Type *p1);
  ~IdentExpNull();
  virtual void accept(Visitor *v);
  virtual IdentExpNull *clone() const;
  void swap(IdentExpNull &);
};

class IdentExpBracket : public IdentExpan
{
public:
  IdentExpan *identexpan_;

  IdentExpBracket(const IdentExpBracket &);
  IdentExpBracket &operator=(const IdentExpBracket &);
  IdentExpBracket(IdentExpan *p1);
  ~IdentExpBracket();
  virtual void accept(Visitor *v);
  virtual IdentExpBracket *clone() const;
  void swap(IdentExpBracket &);
};

class ArgDef : public Arg
{
public:
  Type *type_;
  Ident ident_;

  ArgDef(const ArgDef &);
  ArgDef &operator=(const ArgDef &);
  ArgDef(Type *p1, Ident p2);
  ~ArgDef();
  virtual void accept(Visitor *v);
  virtual ArgDef *clone() const;
  void swap(ArgDef &);
};

class BlockDef : public Block
{
public:
  ListStmt *liststmt_;

  BlockDef(const BlockDef &);
  BlockDef &operator=(const BlockDef &);
  BlockDef(ListStmt *p1);
  ~BlockDef();
  virtual void accept(Visitor *v);
  virtual BlockDef *clone() const;
  void swap(BlockDef &);
};

class Empty : public Stmt
{
public:

  Empty(const Empty &);
  Empty &operator=(const Empty &);
  Empty();
  ~Empty();
  virtual void accept(Visitor *v);
  virtual Empty *clone() const;
  void swap(Empty &);
};

class BStmt : public Stmt
{
public:
  Block *block_;

  BStmt(const BStmt &);
  BStmt &operator=(const BStmt &);
  BStmt(Block *p1);
  ~BStmt();
  virtual void accept(Visitor *v);
  virtual BStmt *clone() const;
  void swap(BStmt &);
};

class Decl : public Stmt
{
public:
  Type *type_;
  ListItem *listitem_;

  Decl(const Decl &);
  Decl &operator=(const Decl &);
  Decl(Type *p1, ListItem *p2);
  ~Decl();
  virtual void accept(Visitor *v);
  virtual Decl *clone() const;
  void swap(Decl &);
};

class Ass : public Stmt
{
public:
  IdentExpan *identexpan_;
  Expr *expr_;

  Ass(const Ass &);
  Ass &operator=(const Ass &);
  Ass(IdentExpan *p1, Expr *p2);
  ~Ass();
  virtual void accept(Visitor *v);
  virtual Ass *clone() const;
  void swap(Ass &);
};

class Incr : public Stmt
{
public:
  IdentExpan *identexpan_;

  Incr(const Incr &);
  Incr &operator=(const Incr &);
  Incr(IdentExpan *p1);
  ~Incr();
  virtual void accept(Visitor *v);
  virtual Incr *clone() const;
  void swap(Incr &);
};

class Decr : public Stmt
{
public:
  IdentExpan *identexpan_;

  Decr(const Decr &);
  Decr &operator=(const Decr &);
  Decr(IdentExpan *p1);
  ~Decr();
  virtual void accept(Visitor *v);
  virtual Decr *clone() const;
  void swap(Decr &);
};

class Ret : public Stmt
{
public:
  Expr *expr_;

  Ret(const Ret &);
  Ret &operator=(const Ret &);
  Ret(Expr *p1);
  ~Ret();
  virtual void accept(Visitor *v);
  virtual Ret *clone() const;
  void swap(Ret &);
};

class VRet : public Stmt
{
public:

  VRet(const VRet &);
  VRet &operator=(const VRet &);
  VRet();
  ~VRet();
  virtual void accept(Visitor *v);
  virtual VRet *clone() const;
  void swap(VRet &);
};

class Cond : public Stmt
{
public:
  Expr *expr_;
  Stmt *stmt_;

  Cond(const Cond &);
  Cond &operator=(const Cond &);
  Cond(Expr *p1, Stmt *p2);
  ~Cond();
  virtual void accept(Visitor *v);
  virtual Cond *clone() const;
  void swap(Cond &);
};

class CondElse : public Stmt
{
public:
  Expr *expr_;
  Stmt *stmt_1;
  Stmt *stmt_2;

  CondElse(const CondElse &);
  CondElse &operator=(const CondElse &);
  CondElse(Expr *p1, Stmt *p2, Stmt *p3);
  ~CondElse();
  virtual void accept(Visitor *v);
  virtual CondElse *clone() const;
  void swap(CondElse &);
};

class While : public Stmt
{
public:
  Expr *expr_;
  Stmt *stmt_;

  While(const While &);
  While &operator=(const While &);
  While(Expr *p1, Stmt *p2);
  ~While();
  virtual void accept(Visitor *v);
  virtual While *clone() const;
  void swap(While &);
};

class SExp : public Stmt
{
public:
  Expr *expr_;

  SExp(const SExp &);
  SExp &operator=(const SExp &);
  SExp(Expr *p1);
  ~SExp();
  virtual void accept(Visitor *v);
  virtual SExp *clone() const;
  void swap(SExp &);
};

class NoInit : public Item
{
public:
  Ident ident_;

  NoInit(const NoInit &);
  NoInit &operator=(const NoInit &);
  NoInit(Ident p1);
  ~NoInit();
  virtual void accept(Visitor *v);
  virtual NoInit *clone() const;
  void swap(NoInit &);
};

class Init : public Item
{
public:
  Ident ident_;
  Expr *expr_;

  Init(const Init &);
  Init &operator=(const Init &);
  Init(Ident p1, Expr *p2);
  ~Init();
  virtual void accept(Visitor *v);
  virtual Init *clone() const;
  void swap(Init &);
};

class Int : public Type
{
public:

  Int(const Int &);
  Int &operator=(const Int &);
  Int();
  ~Int();
  virtual void accept(Visitor *v);
  virtual Int *clone() const;
  void swap(Int &);
};

class Str : public Type
{
public:

  Str(const Str &);
  Str &operator=(const Str &);
  Str();
  ~Str();
  virtual void accept(Visitor *v);
  virtual Str *clone() const;
  void swap(Str &);
};

class Bool : public Type
{
public:

  Bool(const Bool &);
  Bool &operator=(const Bool &);
  Bool();
  ~Bool();
  virtual void accept(Visitor *v);
  virtual Bool *clone() const;
  void swap(Bool &);
};

class Void : public Type
{
public:

  Void(const Void &);
  Void &operator=(const Void &);
  Void();
  ~Void();
  virtual void accept(Visitor *v);
  virtual Void *clone() const;
  void swap(Void &);
};

class Class : public Type
{
public:
  Ident ident_;

  Class(const Class &);
  Class &operator=(const Class &);
  Class(Ident p1);
  ~Class();
  virtual void accept(Visitor *v);
  virtual Class *clone() const;
  void swap(Class &);
};

class Fun : public Type
{
public:
  Type *type_;
  ListType *listtype_;

  Fun(const Fun &);
  Fun &operator=(const Fun &);
  Fun(Type *p1, ListType *p2);
  ~Fun();
  virtual void accept(Visitor *v);
  virtual Fun *clone() const;
  void swap(Fun &);
};

class EVar : public Expr
{
public:
  IdentExpan *identexpan_;

  EVar(const EVar &);
  EVar &operator=(const EVar &);
  EVar(IdentExpan *p1);
  ~EVar();
  virtual void accept(Visitor *v);
  virtual EVar *clone() const;
  void swap(EVar &);
};

class ELitInt : public Expr
{
public:
  Integer integer_;

  ELitInt(const ELitInt &);
  ELitInt &operator=(const ELitInt &);
  ELitInt(Integer p1);
  ~ELitInt();
  virtual void accept(Visitor *v);
  virtual ELitInt *clone() const;
  void swap(ELitInt &);
};

class ELitTrue : public Expr
{
public:

  ELitTrue(const ELitTrue &);
  ELitTrue &operator=(const ELitTrue &);
  ELitTrue();
  ~ELitTrue();
  virtual void accept(Visitor *v);
  virtual ELitTrue *clone() const;
  void swap(ELitTrue &);
};

class ELitFalse : public Expr
{
public:

  ELitFalse(const ELitFalse &);
  ELitFalse &operator=(const ELitFalse &);
  ELitFalse();
  ~ELitFalse();
  virtual void accept(Visitor *v);
  virtual ELitFalse *clone() const;
  void swap(ELitFalse &);
};

class EString : public Expr
{
public:
  String string_;

  EString(const EString &);
  EString &operator=(const EString &);
  EString(String p1);
  ~EString();
  virtual void accept(Visitor *v);
  virtual EString *clone() const;
  void swap(EString &);
};

class Neg : public Expr
{
public:
  Expr *expr_;

  Neg(const Neg &);
  Neg &operator=(const Neg &);
  Neg(Expr *p1);
  ~Neg();
  virtual void accept(Visitor *v);
  virtual Neg *clone() const;
  void swap(Neg &);
};

class Not : public Expr
{
public:
  Expr *expr_;

  Not(const Not &);
  Not &operator=(const Not &);
  Not(Expr *p1);
  ~Not();
  virtual void accept(Visitor *v);
  virtual Not *clone() const;
  void swap(Not &);
};

class EMul : public Expr
{
public:
  Expr *expr_1;
  MulOp *mulop_;
  Expr *expr_2;

  EMul(const EMul &);
  EMul &operator=(const EMul &);
  EMul(Expr *p1, MulOp *p2, Expr *p3);
  ~EMul();
  virtual void accept(Visitor *v);
  virtual EMul *clone() const;
  void swap(EMul &);
};

class EAdd : public Expr
{
public:
  Expr *expr_1;
  AddOp *addop_;
  Expr *expr_2;

  EAdd(const EAdd &);
  EAdd &operator=(const EAdd &);
  EAdd(Expr *p1, AddOp *p2, Expr *p3);
  ~EAdd();
  virtual void accept(Visitor *v);
  virtual EAdd *clone() const;
  void swap(EAdd &);
};

class ERel : public Expr
{
public:
  Expr *expr_1;
  RelOp *relop_;
  Expr *expr_2;

  ERel(const ERel &);
  ERel &operator=(const ERel &);
  ERel(Expr *p1, RelOp *p2, Expr *p3);
  ~ERel();
  virtual void accept(Visitor *v);
  virtual ERel *clone() const;
  void swap(ERel &);
};

class EAnd : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EAnd(const EAnd &);
  EAnd &operator=(const EAnd &);
  EAnd(Expr *p1, Expr *p2);
  ~EAnd();
  virtual void accept(Visitor *v);
  virtual EAnd *clone() const;
  void swap(EAnd &);
};

class EOr : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EOr(const EOr &);
  EOr &operator=(const EOr &);
  EOr(Expr *p1, Expr *p2);
  ~EOr();
  virtual void accept(Visitor *v);
  virtual EOr *clone() const;
  void swap(EOr &);
};

class Plus : public AddOp
{
public:

  Plus(const Plus &);
  Plus &operator=(const Plus &);
  Plus();
  ~Plus();
  virtual void accept(Visitor *v);
  virtual Plus *clone() const;
  void swap(Plus &);
};

class Minus : public AddOp
{
public:

  Minus(const Minus &);
  Minus &operator=(const Minus &);
  Minus();
  ~Minus();
  virtual void accept(Visitor *v);
  virtual Minus *clone() const;
  void swap(Minus &);
};

class Times : public MulOp
{
public:

  Times(const Times &);
  Times &operator=(const Times &);
  Times();
  ~Times();
  virtual void accept(Visitor *v);
  virtual Times *clone() const;
  void swap(Times &);
};

class Div : public MulOp
{
public:

  Div(const Div &);
  Div &operator=(const Div &);
  Div();
  ~Div();
  virtual void accept(Visitor *v);
  virtual Div *clone() const;
  void swap(Div &);
};

class Mod : public MulOp
{
public:

  Mod(const Mod &);
  Mod &operator=(const Mod &);
  Mod();
  ~Mod();
  virtual void accept(Visitor *v);
  virtual Mod *clone() const;
  void swap(Mod &);
};

class LTH : public RelOp
{
public:

  LTH(const LTH &);
  LTH &operator=(const LTH &);
  LTH();
  ~LTH();
  virtual void accept(Visitor *v);
  virtual LTH *clone() const;
  void swap(LTH &);
};

class LE : public RelOp
{
public:

  LE(const LE &);
  LE &operator=(const LE &);
  LE();
  ~LE();
  virtual void accept(Visitor *v);
  virtual LE *clone() const;
  void swap(LE &);
};

class GTH : public RelOp
{
public:

  GTH(const GTH &);
  GTH &operator=(const GTH &);
  GTH();
  ~GTH();
  virtual void accept(Visitor *v);
  virtual GTH *clone() const;
  void swap(GTH &);
};

class GE : public RelOp
{
public:

  GE(const GE &);
  GE &operator=(const GE &);
  GE();
  ~GE();
  virtual void accept(Visitor *v);
  virtual GE *clone() const;
  void swap(GE &);
};

class EQU : public RelOp
{
public:

  EQU(const EQU &);
  EQU &operator=(const EQU &);
  EQU();
  ~EQU();
  virtual void accept(Visitor *v);
  virtual EQU *clone() const;
  void swap(EQU &);
};

class NE : public RelOp
{
public:

  NE(const NE &);
  NE &operator=(const NE &);
  NE();
  ~NE();
  virtual void accept(Visitor *v);
  virtual NE *clone() const;
  void swap(NE &);
};



class ListClassMember : public Visitable, public std::vector<ClassMember*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListClassMember *clone() const;
};

class ListTopDef : public Visitable, public std::vector<TopDef*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListTopDef *clone() const;
};

class ListArg : public Visitable, public std::vector<Arg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListArg *clone() const;
};

class ListStmt : public Visitable, public std::vector<Stmt*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStmt *clone() const;
};

class ListItem : public Visitable, public std::vector<Item*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListItem *clone() const;
};

class ListType : public Visitable, public std::vector<Type*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListType *clone() const;
};

class ListExpr : public Visitable, public std::vector<Expr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExpr *clone() const;
};



#endif
